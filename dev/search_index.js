var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = OkFiles","category":"page"},{"location":"#OkFiles","page":"Home","title":"OkFiles","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OkFiles.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [OkFiles]","category":"page"},{"location":"#OkFiles.datalist-Tuple{Regex, String}","page":"Home","title":"OkFiles.datalist","text":"Example:\n\n find_in = \"D:\\GoogleDrive\\1Programming\\DATA\"\n regexppattern = r\".*\\.mat\"\n find = \"both\"\n method = \"readdir\"\n O = datalist(regexppattern, find_in, method, find);\n\nOutput:\n\n O.fullpath is a string vector of the paths of the desired files or folders.\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.filelist-Tuple{Any}","page":"Home","title":"OkFiles.filelist","text":"filelist(dir; join=true, sort=true) return the list of files. For its keyword arguments, see readdir.\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.filelist-Tuple{Regex, Any}","page":"Home","title":"OkFiles.filelist","text":"filelist(expr::Regex, dir; kwargs...) returns a vector of paths where the file matches expr. kwargs those forwarded to the method of filelist(dir; kwargs...).\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.filelist-Tuple{SFTPClient.SFTP, Vararg{Any}}","page":"Home","title":"OkFiles.filelist","text":"filelist(dir::SFTPClient.SFTP [, subdir]) returns the file list for the SFTP directory. This function utilize Base.readdir(sftp::SFTP, join::Bool = false, sort::Bool = true) of SFTPClient.\n\nThis function currently do no support join and sort argument, because it rely on sftpstat to check whether a path is a file, but sftpstat always returns unsorted and not-joined results.\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.filelist-Tuple{}","page":"Home","title":"OkFiles.filelist","text":"filelist(; kwargs...) returns the paths for all the files in the current directory. kwargs those forwarded to the method of filelist(dir; kwargs...).\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.filelistall-Tuple{Any}","page":"Home","title":"OkFiles.filelistall","text":"Similar to filelist, filelistall(dir) returns all files in the directory (as well as its subdirectory) dir.\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.filelistall-Tuple{Regex, Any}","page":"Home","title":"OkFiles.filelistall","text":"Similar to filelist, filelistall(expr::Regex, dir) returns files whose name matches expr in the directory (as well as its subdirectory) dir.\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.filelistall-Tuple{Regex, SFTPClient.SFTP, Vararg{Any}}","page":"Home","title":"OkFiles.filelistall","text":"filelistall(expr::Regex, sftp::SFTPClient.SFTP, vararg...)\n\nExample\n\nReturn a list of all files start with string \"2024\" in the sftp and all its subdirectory, and then download all files in this list:\n\nusing SFTPClient, OkFiles\n\nsftp = SFTP(\"sftp://123.456.78.90\", \"myservername\", \"thisispassword\")\n\ndownload_list = filelistall(r\"^2024.*\", sftp)\n\nmkpath.(joinpath.(\"data\", \"file2024\", dirname.(download_list))) # directories of destination should be created otherwise `SFTPClient.download` will fail.\n\nSFTPClient.download.(sftp, download_list, downloadDir=\"data/file2024\")\n\nnote: Note\nvararg must follow the SFTPClient interface. For more information, please refer OkFiles.sftpvararginterface.\n\nExample\n\nSearch only files in the \"em13\" folder of the sftp server:\n\ndownload_list = filelistall(r\"^2024.*\", sftp, \"em13\")\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.filelistall-Tuple{SFTPClient.SFTP, Vararg{Any}}","page":"Home","title":"OkFiles.filelistall","text":"filelistall(sftp::SFTPClient.SFTP) return the list of paths to every file under the root.\n\nfilelistall(sftp::SFTPClient.SFTP, dir) return the list of paths to every file under the dir.\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.folderlist-Tuple{Any}","page":"Home","title":"OkFiles.folderlist","text":"folderlist(dir; join=true) return the list of folder but no subfolder under dir. This function uses walkdir.\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.folderlist-Tuple{Regex, Any}","page":"Home","title":"OkFiles.folderlist","text":"folderlist(expr::Regex, dir; join=true) returns a vector of paths who match expr.\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.folderlist-Tuple{}","page":"Home","title":"OkFiles.folderlist","text":"folderlist(;kwargs...) returns results in the current directory (pwd)\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.folderlistall-Tuple{Any}","page":"Home","title":"OkFiles.folderlistall","text":"folderlistall(dir) return the list of folders and all subfolders under dir. For its keyword arguments, see walkdir.\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.folderlistall-Tuple{}","page":"Home","title":"OkFiles.folderlistall","text":"folderlistall() returns results in the current directory (pwd)\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.mkdirway-Tuple{Any}","page":"Home","title":"OkFiles.mkdirway","text":"mkdirway(newpath) makes directories along the way to the file newpath. If newpath is a directory, directories will be made up to its parent (i.e., dirname(newpath)). This behavior is intended for mv(dir0, dir1) without force=true, that dir1 should not be created first.\n\nmkdirway(newpath) just returns newpath without any modification on it.\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.mv2dir-Tuple{Any, Any}","page":"Home","title":"OkFiles.mv2dir","text":"mv2dir(srcfile, newdir::AbstractString) moves srcfile to the newdir directory, preseving its original name (f = identity).\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.mv2dir-Tuple{Function, Any, AbstractString}","page":"Home","title":"OkFiles.mv2dir","text":"mv2dir(f::Function, srcfile, newdir::AbstractString) moves a file srcfile to a directory newdir. The new path for the srcfile is newpath = joinpath(newdir, basename(srcfile)) |> f, where an arbitrary function f can be applied to the newpath.\n\nmv2dir takes keyword arguments of mv.\n\nExamples\n\nmkdirway(newpath) makes directories along the way to the file newpath:\n\nmv2dir(mkdirway, \"hello/world/iris.csv\", \"another/world\") # results in \"another/world/iris.csv\"\n\nwhich is equivualent to:\n\nmkpath(\"another/world\")\nmv2dir(\"hello/world/iris.csv\", \"another/world\") # results in \"another/world/iris.csv\"\n\nIf srcfile is a directory,\n\nmkpath(\"another\") # noted that \"another/world\" not created\nmv2dir(\"hello/world\", \"another\") # Move all contents under \"world\" to the new folder \"another\", resulting in \"another/world/iris.csv\"\n\nwhich is equivualent to\n\nmv2dir(mkdirway, \"hello/world\", \"another\") # results in \"another/world/iris.csv\"\n\nAlso see the docstring of mkdirway.\n\nAnother example\n\nYou can apply f = pathnorepeat that\n\nmv2dir(pathnorepeat, \"hello/world\", \"another\") # results in \"another/world_0001/iris.csv\" if directory \"another/world\" already exists.\n\nmv2dir(pathnorepeat, \"hello/world/iris.csv\", \"another/world\") # results in \"another/world/iris_0001.csv\" if file \"another/world/iris.csv\" already exists.\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.pathnorepeat-Tuple{Any}","page":"Home","title":"OkFiles.pathnorepeat","text":"pathnorepeat(filepath; suffix_fun = serial_number_4d) returns non-repeated file path, by increasing the serial_number_4d by default. suffix_fun can be assigned as an arbitrary function that suffix_fun(n) returns a string updated by integer n.\n\n\n\n\n\n","category":"method"},{"location":"#OkFiles.sftpvararginterface-Tuple{Any}","page":"Home","title":"OkFiles.sftpvararginterface","text":"sftpvararginterface(vararg) returns the second argument for SFTPClient.walkdir and SFTPClient.sftpstat, based on variant input argument vararg of length 0 (empty) or 1.\n\n\n\n\n\n","category":"method"}]
}
